.\"
.\" Copyright (c) 2008-2009 Wojciech A. Koszek <wkoszek@FreeBSD.org>
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\" $Id$
.\"
.Dd August 12, 2009
.Os FreeBSD CURRENT
.Dt libcla 3
.Sh NAME
.Nd Library for Command Line Argument handling
.Sh SYNOPSIS
.In cla.h
.\"
.Ft struct cla *
.Fo cla_new
.Fa "cla_func_t *func"
.Fa "void *arg"
.Fa "const void *opts"
.Fa "const char *desc"
.Fa "const char *fmt ..."
.Fc
.\"
.Ft struct cla *
.Fo cla_new_fmt
.Fa "cla_func_t *func"
.Fa "void *arg"
.Fa "const void *opts"
.Fa "const char *desc"
.Fa "const char *fmt"
.Fa "va_list va"
.Fc
.\"
.Ft struct cla *
.Fo cla_new_node
.Fa "const char *name"
.Fa "..."
.Fc
.\"
.Ft struct cla *
.Fo cla_new_empty
.Fc
.\"
.Ft void
.Fo cla_destroy
.Fa "struct cla *cmd"
.Fc
.\"
.Ft void
.Fo cla_add_cmd
.Fa "struct cla *root"
.Fa "struct cla *cmd"
.Fc
.\"
.Ft void
.Fo cla_add_subcmd
.Fa "struct cla *cla"
.Fa "struct cla *subcmd"
.Fc
.\"
.Ft int
.Fo cla_dispatch
.Fa "struct cla *root"
.Fa "const char *usage"
.Fa "int argc"
.Fa "char **argv"
.Fa "int opts"
.Fc
.\"
.Ft struct cla *
.Fo cla_lookup
.Fa "struct cla *root"
.Fa "int argc"
.Fa "char **argv"
.Fa "int *arg_idx"
.Fa "int *depth"
.Fc
.\"
.Ft const char *
.Fo cla_get_name
.Fa "struct cla *cla"
.Fc
.\"
.Ft const char *
.Fo cla_get_desc
.Fa "struct cla *cla"
.Fc
.\"
.Ft const char *
.Fo cla_get_name
.Fa "struct cla *cla"
.Fc
.\"
.Ft void
.Fo cla_set_desc
.Fa "struct cla *cla"
.Fa "const char *desc"
.Fc
.\"
.Ft void
.Fo cla_set_func
.Fa "struct cla *cla"
.Fa "cla_func_t *func"
.Fc
.\"
.Ft void
.Fo cla_set_softc
.Fa "struct cla *cla"
.Fa "void *arg"
.Fc
.\"
.Ft void *
.Fo cla_get_softc
.Fa "struct cla *cla"
.Fc
.\"
.Ft void
.Fo cla_print_dot_fp
.Fa "struct cla *cla"
.Fa "FILE *fp"
.Fc
.\"
.Ft int
.Fo cla_has_subcmd
.Fa "struct cla *cla"
.Fc
.\"
.Ft int
.Fo cla_has_next
.Fa "struct cla *cla"
.Fc
.\"
.Ft int
.Fo cla_is_leaf
.Fa "struct cla *cla"
.Fc
.\"
.Ft void
.Fo cla_usage
.Fa "struct cla *cla"
.Fc
.\"
.Ft const char *
.Fo cla_strerror
.Fa "cla_err_t code"
.Fc
.\"
.Ft void
.Fo cla_print_dot
.Fa "struct cla *cla"
.Fc
.\"
.Ft void
.Fo cla_print_fp
.Fa "struct cla *cla"
.Fa "FILE *fp"
.Fc
.\"
.Ft void
.Fo cla_print
.Fa "struct cla *cla"
.Fc
.Sh DESCRIPTION
.Pp
CLA is a library for hierarchical command line handling.
.Pp
It takes command lines arguments as it's input, walks down the
command line tree built by the application programmer, and calls the
function responsible for dispatching particular command.
.Pp
It also acts as extensible data structure whose role is to provide
enough abstraction to make further functionality enhencements
possible.
.Pp
Commands are organized in form of trees, just like those present in
command interpreters known from various CLI systems present in
configurable devices or several UNIX system utilities.
.Pp
Each command tree has one root, which may either be a main command,
or a program name. Commands lying above the root are called leaf
commands. Leaf command may either represent particular subcommand
for a program, or just represent a node -- placeholder, which
provides placeholder for a command hierarchy.
.Pp
Root command is said to have depth 0. Each subcommand has bigger depth.
.Sh FUNCTIONS
.Bl -tag -width indent
Command management must be done with following functions:
.\"----------------------------------------------------------------
.It Fn cla_new "func" "arg" "opts" "desc" "name" "..."
.Bl -tag -width ".Fa opts"
.It Fa func
specifies function of type
.Ft "cla_func_t"
to be called once a command is dispatched. Function takes one
argument of type
.Fa "void *"
being a pointer to auxillary data that can be passed to the
function.
.It Fa arg
is an argument passed to the callback function
.Fa "func" .
.It Fa opts
is left for future
.Nm
implementations and is here to prevent ABI breakages in the future.
.It Fa desc
specifies obligatory description of a command 
.It Fa name
which is a variable legth format compliant with
.Xr printf 2
format.
.El
.\"----------------------------------------------------------------
.It Fn cla_new_fmt "func" "arg" "opts" "desc" "va"
is a variant of
.Fn cla_new .
Meaning of
.Fa func ,
.Fa arg ,
.Fa opts
and
.Fa desc
is preserved, while
.Fa va
is an argument of type
.Ft "va_list" .
.\"----------------------------------------------------------------
.It Fn cla_new_node "name" "..."
creates a node command (the one having no function and acting as
a placeholder for commands placed below it) and is the quicker way
of saying
.Fn cla_new "NULL" "NULL" "NULL" "NULL" "name" "..."
.\"----------------------------------------------------------------
.It Fn cla_new_empty
creates empty command with no name, description and function or 
arguments.
It's the faster way of saying
.Fn cla_new "NULL" "NULL" "NULL" "NULL" "NULL"
and has been created mainly for regression tests.
.\"----------------------------------------------------------------
.It Fn cla_destroy "cmd"
destroys commands previously allocated command
.Fa cmd
by either
.Fn cla_new
or
.Fn cla_new_fmt .
.\"----------------------------------------------------------------
.It Fn cla_add_cmd "tree" "cmd"
function can be used to add command
.Fa "cmd"
to the command tree
.Fa "tree" .
Both
.Fa tree
and
.Fa cmd
must be previously allocated with either
.Fn cla_new
or
.Fn cla_new_fmt
and can't be NULL.
.\"----------------------------------------------------------------
.It Fn cla_add_subcmd "tree" "subcmd"
function can be used to add subcommand
.Fa "subcmd"
to the already existing command tree
.Fa "tree" .
Both
.Fa tree
and
.Fa subcmd
must be previously allocated by either
.Fn cla_new
or
.Fn cla_new_fmt
and can't be NULL.
.\"----------------------------------------------------------------
.It Fn cla_dispatch "root" "usage" "argc" "argv" "opts"
function can be used to dispatch commands
.Fa argv
of size
.Fa argc
from command tree
.Fa root
based on dispatch options
.Fa "opts".
In case if no command is found,
.Fa usage
is being printed to standard output.
.Fa root
must be previously allocated by either
.Fn cla_new
or
.Fn cla_new_fmt
and can't be NULL.
Array
.Fa argv
must point to
.Fa argc
charater strings, each of which must be NULL-terminated.
It is exptected that the last argument (one lying in
.Fa argc + 1
position points to NULL.
.\"----------------------------------------------------------------
.It Fn cla_lookup "*root" "argc" "**argv" "*arg_idx" "*depth"
can be used to search for commands from the command tree
.Fa root
present in array
.Fa argv
of size
.Fa "argc" .
On success, pointer to a command found is returned and
.Fa arg_idx
and
.Fa depth
are filled with index within
.Fa argv
of last command matched depth of a command in command tree
respectively.
.\"----------------------------------------------------------------
.It Fn cla_get_name "cmd"
returns a name of command
.Fa "cmd" .
.\"----------------------------------------------------------------
.It Fn cla_get_desc "cmd"
returns description of command
.Fa "cmd" .
.\"----------------------------------------------------------------
.It Fn cla_set_desc "cmd" "desc"
sets description
.Fa desc
of command
.Fa "cmd" .
.\"----------------------------------------------------------------
.It Fn cla_set_func "cmd" "*func"
sets functon
.Fa func
of command
.Fa "cmd" .
.\"----------------------------------------------------------------
.It Fn cla_set_softc "cmd" "arg"
sets software carrier of the command
.Fa cmd
to
.Fa arg 
It will get called recursively for all subcommands automatically.
Software carrier is passed to the command's callback function
each time command is dispatched.
.\"----------------------------------------------------------------
.It Fn cla_get_softc "cmd"
returns software carrier of the command
.Fa cmd
.\"----------------------------------------------------------------
.It Fn cla_print_dot_fp "cmd" "fp"
prints a structure of a command tree
.Fa cmd
to the FILE pointer
.Fa "fp" .
.\"----------------------------------------------------------------
.It Fn cla_has_subcmd "cmd"
returns true is command
.Fa cmd
has a subcommand.
.\"----------------------------------------------------------------
.It Fn cla_has_next "cmd"
returns true if command
.Fa cmd
has a next command (the one with equal depth).
.\"----------------------------------------------------------------
.It Fn cla_is_leaf "cmd"
returns true if command
.Fa cmd
is a leaf command (has no next or subcommand).
.\"----------------------------------------------------------------
.It Fn cla_usage "cmd"
prints command tree 
.Fa cmd
usage (command tree with descriptions) to the standard output.
.\"----------------------------------------------------------------
.It Fn cla_strerror "code"
converts
.Fa code
of type
.Ft "cla_err_t"
returned by
.Fn cmd_dispatch
to human-readable form.
.\"----------------------------------------------------------------
.It Fn cla_print_dot "cmd"
prints a structure of command tree
.Fa cmd
in a Dot structure (Graphvis package).
.\"----------------------------------------------------------------
.It Fn cla_print "cmd"
print command tree usage to the standard output.
.\"----------------------------------------------------------------
.It Fn cla_print_fp "cmd" "fp"
is a variant of
.Fn cla_print
letting you to print command tree usage to the FILE descriptor
.Fa "fp" .
.\"----------------------------------------------------------------
.El
.Sh EXAMPLES
TODO section.
.Sh BUGS
Argument's flags aren't supported in current version of a library
(2009.08.12).
.Sh AUTHORS
.An "Wojciech A. Koszek" Aq wkoszek@FreeBSD.org
